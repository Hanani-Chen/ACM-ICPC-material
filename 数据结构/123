#include<bits/stdc++.h>
using namespace std;typedef long long ll;typedef pair<ll,ll>pll;
#define fi first
#define se second
#define pb(x) push_back(x)
#define m_p(a,b) make_pair(a,b);
#define sz(a) ((int)(a).size())
#define f(i,a,b) for(int i=a;i<b;++i)
#define ff(i,a,b) for(int i=a;i<=b;++i)
#define de(a) cout << #a << " = " << a << endl;
#define dd(a) cout << #a << " = " << a << "  ";
#define file freopen("in.txt","r",stdin)
#define mem(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define jkl ios::sync_with_stdio(false);cin.tie(false);
#define all(x) x.begin(),x.end()
/*********************************************/
int root[N];
struct STZXTree{
	#define qm (l+r)>>1 
	struct node{ int l,r,sum; } T[N*40];
	void updata(int l,int r,int &x,int y,int pos) {
		cnt++;
		T[cnt]=T[y];T[cnt].sum++;x=cnt;
		if(l==r) return ;
		int mid=qm;
		if(pos<=mid) updata(l,mid,T[x].l,T[y].l,pos);
		else updata(mid+1,r,T[x].r,T[y].r,pos);}
	int query(int l,int r,int x,int y,int k) {
		if(l==r) return l;
		int sum=T[T[y].l].sum-T[T[x].l].sum;
		int mid=qm;
		if(k<=sum) return query(l,mid,T[x].l,T[y].l,k);
		else return query(mid+1,r,T[x].r,T[y].r,k-sum);}
}SST;
/*SST.query(1,n,root[l1-1],root[r1],k)l1~我打算离开房间/
/*ff(i,1,n) SST.updata(1,n,root[i],root[i-1],getid(a[i]));*/
